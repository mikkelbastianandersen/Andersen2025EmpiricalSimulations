import numpy as np

# Simulation parameters
T = 1000  # Number of time steps
dt = 1 / 252  # Daily time steps (approx. 252 trading days/year)
n_assets = 10
r = 0.05

# Initial risky asset prices and ESG impacts
S0 = np.ones(n_assets) * 100.0
G0 = np.zeros(n_assets)

# Initial expected returns (mu_0): increasing 5% to 14%
mu_0 = np.array([0.05, 0.06, 0.07, 0.08, 0.09, 0.10, 0.11, 0.12, 0.13, 0.14])

# Initial volatility matrix (sigma_0): tridiagonal, non-diagonal
sigma_0 = np.array(
    [
        [0.10, 0.01, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
        [0.01, 0.11, 0.01, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
        [0.00, 0.01, 0.12, 0.01, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
        [0.00, 0.00, 0.01, 0.13, 0.01, 0.00, 0.00, 0.00, 0.00, 0.00],
        [0.00, 0.00, 0.00, 0.01, 0.14, 0.01, 0.00, 0.00, 0.00, 0.00],
        [0.00, 0.00, 0.00, 0.00, 0.01, 0.15, 0.01, 0.00, 0.00, 0.00],
        [0.00, 0.00, 0.00, 0.00, 0.00, 0.01, 0.16, 0.01, 0.00, 0.00],
        [0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.01, 0.17, 0.01, 0.00],
        [0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.01, 0.18, 0.01],
        [0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.01, 0.19],
    ]
)

# Initial ESG drift (alpha_0): 0.01 to 0.10
alpha_0 = np.array([0.1, 0.09, 0.08, 0.07, 0.06, 0.05, 0.04, 0.03, 0.02, 0.01])

# Initial ESG volatility matrix (beta_0): tridiagonal
beta_0 = np.array(
    [
        [0.02, 0.005, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
        [0.005, 0.03, 0.005, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
        [0.00, 0.005, 0.04, 0.005, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
        [0.00, 0.00, 0.005, 0.05, 0.005, 0.00, 0.00, 0.00, 0.00, 0.00],
        [0.00, 0.00, 0.00, 0.005, 0.06, 0.005, 0.00, 0.00, 0.00, 0.00],
        [0.00, 0.00, 0.00, 0.00, 0.005, 0.07, 0.005, 0.00, 0.00, 0.00],
        [0.00, 0.00, 0.00, 0.00, 0.00, 0.005, 0.08, 0.005, 0.00, 0.00],
        [0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.005, 0.09, 0.005, 0.00],
        [0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.005, 0.10, 0.005],
        [0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.005, 0.11],
    ]
)

# Correlation matrix between dz and dw (rho_0): identity (no cross-correlation)
rho_0 = np.array(
    [
        [0.10, -0.02, 0.05, 0.00, 0.08, -0.03, 0.01, 0.00, -0.01, 0.04],
        [-0.01, 0.08, 0.00, -0.02, 0.03, 0.01, -0.01, 0.02, 0.00, -0.03],
        [0.04, 0.00, -0.05, 0.01, 0.06, -0.02, 0.02, 0.00, 0.01, 0.00],
        [0.00, -0.01, 0.01, -0.04, 0.02, 0.00, 0.00, 0.01, 0.02, 0.00],
        [0.03, 0.02, 0.04, 0.00, -0.02, 0.03, 0.00, -0.01, 0.02, 0.01],
        [-0.02, 0.00, -0.01, 0.00, 0.02, 0.05, -0.03, 0.01, 0.00, 0.00],
        [0.00, -0.01, 0.02, -0.01, 0.01, 0.00, 0.03, 0.01, -0.02, 0.00],
        [0.01, 0.02, -0.01, 0.01, -0.01, 0.00, 0.01, 0.04, 0.00, 0.02],
        [-0.01, 0.00, 0.01, 0.02, 0.01, -0.01, 0.00, 0.00, -0.03, 0.01],
        [0.02, -0.01, 0.00, 0.00, 0.00, 0.02, 0.01, 0.01, 0.01, 0.00],
    ]
)
